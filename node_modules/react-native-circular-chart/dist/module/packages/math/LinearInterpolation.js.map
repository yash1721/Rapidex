{"version":3,"sources":["LinearInterpolation.tsx"],"names":["LinearInterpolation","value","inputRange","outputRange","minInputRange","Math","min","maxInputRange","max","minOutPutRange","maxOutPutRange","percentage","getPercentageRange"],"mappings":"AAAA;AACA,OAAO,SAASA,mBAAT,OAQJ;AAAA,MARiC;AAClCC,IAAAA,KADkC;AAElCC,IAAAA,UAFkC;AAGlCC,IAAAA;AAHkC,GAQjC;AACD,QAAMC,aAAa,GAAGC,IAAI,CAACC,GAAL,CAAS,GAAGJ,UAAZ,CAAtB;AACA,QAAMK,aAAa,GAAGF,IAAI,CAACG,GAAL,CAAS,GAAGN,UAAZ,CAAtB;AACA,QAAMO,cAAc,GAAGJ,IAAI,CAACC,GAAL,CAAS,GAAGH,WAAZ,CAAvB;AACA,QAAMO,cAAc,GAAGL,IAAI,CAACG,GAAL,CAAS,GAAGL,WAAZ,CAAvB;;AAEA,MAAIF,KAAK,GAAGM,aAAZ,EAA2B;AACzB,WAAOG,cAAP;AACD,GAFD,MAEO,IAAIT,KAAK,GAAGG,aAAZ,EAA2B;AAChC,WAAOK,cAAP;AACD;;AAED,QAAME,UAAU,GAAGC,kBAAkB,CAAC;AACpCX,IAAAA,KADoC;AAEpCK,IAAAA,GAAG,EAAEF,aAF+B;AAGpCI,IAAAA,GAAG,EAAED;AAH+B,GAAD,CAArC,CAZC,CAkBD;;AACA,SAAO,CAAC,IAAII,UAAL,IAAmBF,cAAnB,GAAoCE,UAAU,GAAGD,cAAxD;AACD;;AAED,SAASE,kBAAT,QAQW;AAAA,MARiB;AAC1BX,IAAAA,KAD0B;AAE1BK,IAAAA,GAF0B;AAG1BE,IAAAA;AAH0B,GAQjB;AACT;AAEA;AACA,SAAQ,CAACP,KAAK,GAAGK,GAAT,IAAgB,GAAjB,IAAyBE,GAAG,GAAGF,GAA/B,IAAsC,GAA7C;AACD","sourcesContent":["// this linear interpolation is suppoprt only clamp.\nexport function LinearInterpolation({\n  value,\n  inputRange,\n  outputRange,\n}: {\n  value: number;\n  inputRange: [number, number];\n  outputRange: [number, number];\n}) {\n  const minInputRange = Math.min(...inputRange);\n  const maxInputRange = Math.max(...inputRange);\n  const minOutPutRange = Math.min(...outputRange);\n  const maxOutPutRange = Math.max(...outputRange);\n\n  if (value > maxInputRange) {\n    return maxOutPutRange;\n  } else if (value < minInputRange) {\n    return minOutPutRange;\n  }\n\n  const percentage = getPercentageRange({\n    value,\n    min: minInputRange,\n    max: maxInputRange,\n  });\n\n  // formula: (1 - percentage) * min + percentage * max; ðŸ˜Ž\n  return (1 - percentage) * minOutPutRange + percentage * maxOutPutRange;\n}\n\nfunction getPercentageRange({\n  value,\n  min,\n  max,\n}: {\n  value: number;\n  min: number;\n  max: number;\n}): number {\n  //formula calclate percentange by range ((input - min) * 100) / (max - min) ðŸ˜Ž\n\n  // return between 0 -> 1\n  return ((value - min) * 100) / (max - min) / 100;\n}\n"]}