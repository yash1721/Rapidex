{"version":3,"sources":["Degree.test.js"],"names":["React","Degree","describe","it","degree","radian","toRadian","expect","Number","toFixed","toBe","result","actualResult","Math","PI"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,SAASC,MAAT,QAAuB,UAAvB;AAEAC,QAAQ,CAAC,iCAAD,EAAoC,MAAY;AACtDC,EAAAA,EAAE,CAAC,mBAAD,EAAsB,MAAM;AAC5B,UAAMC,MAAM,GAAG,EAAf;AACA,UAAMC,MAAM,GAAG,IAAIJ,MAAJ,CAAWG,MAAX,EAAmBE,QAAnB,EAAf;AAEAC,IAAAA,MAAM,CAACC,MAAM,CAACH,MAAM,CAACI,OAAP,CAAe,EAAf,CAAD,CAAP,CAAN,CAAmCC,IAAnC,CAAwC,eAAxC;AACD,GALC,CAAF;AAOAP,EAAAA,EAAE,CAAC,eAAD,EAAkB,MAAM;AACxB,UAAMC,MAAM,GAAG,EAAf;AACA,UAAMC,MAAM,GAAG,IAAIJ,MAAJ,CAAWG,MAAX,EAAmBE,QAAnB,EAAf;AAEAC,IAAAA,MAAM,CAACC,MAAM,CAACH,MAAM,CAACI,OAAP,CAAe,EAAf,CAAD,CAAP,CAAN,CAAmCC,IAAnC,CAAwC,eAAxC;AACD,GALC,CAAF;AAOAP,EAAAA,EAAE,CAAC,cAAD,EAAiB,MAAM;AACvB,UAAMC,MAAM,GAAG,GAAf;AACA,UAAMC,MAAM,GAAG,IAAIJ,MAAJ,CAAWG,MAAX,EAAmBE,QAAnB,EAAf;AAEA,UAAMK,MAAM,GAAGH,MAAM,CAACH,MAAM,CAACI,OAAP,CAAe,EAAf,CAAD,CAArB;AACA,UAAMG,YAAY,GAAGJ,MAAM,CAACK,IAAI,CAACC,EAAL,CAAQL,OAAR,CAAgB,EAAhB,CAAD,CAA3B;AAEAF,IAAAA,MAAM,CAACI,MAAD,CAAN,CAAeD,IAAf,CAAoBE,YAApB;AACD,GARC,CAAF;AAUAT,EAAAA,EAAE,CAAC,iBAAD,EAAoB,MAAM;AAC1B,UAAMC,MAAM,GAAG,GAAf;AACA,UAAMC,MAAM,GAAG,IAAIJ,MAAJ,CAAWG,MAAX,EAAmBE,QAAnB,EAAf;AAEA,UAAMK,MAAM,GAAGH,MAAM,CAACH,MAAM,CAACI,OAAP,CAAe,EAAf,CAAD,CAArB;AACA,UAAMG,YAAY,GAAGJ,MAAM,CAAC,CAAE,IAAIK,IAAI,CAACC,EAAV,GAAgB,CAAjB,EAAoBL,OAApB,CAA4B,EAA5B,CAAD,CAA3B;AAEAF,IAAAA,MAAM,CAACI,MAAD,CAAN,CAAeD,IAAf,CAAoBE,YAApB;AACD,GARC,CAAF;AAUAT,EAAAA,EAAE,CAAC,eAAD,EAAkB,MAAM;AACxB,UAAMC,MAAM,GAAG,GAAf;AACA,UAAMC,MAAM,GAAG,IAAIJ,MAAJ,CAAWG,MAAX,EAAmBE,QAAnB,EAAf;AAEA,UAAMK,MAAM,GAAGH,MAAM,CAACH,MAAM,CAACI,OAAP,CAAe,EAAf,CAAD,CAArB;AACA,UAAMG,YAAY,GAAGJ,MAAM,CAAC,CAAC,IAAIK,IAAI,CAACC,EAAV,EAAcL,OAAd,CAAsB,EAAtB,CAAD,CAA3B;AAEAF,IAAAA,MAAM,CAACI,MAAD,CAAN,CAAeD,IAAf,CAAoBE,YAApB;AACD,GARC,CAAF;AASD,CA5CO,CAAR","sourcesContent":["import React from \"react\";\n// import { sum } from \"../../src/utils/Array\";\nimport { Degree } from \"./Degree\";\n\ndescribe(\"Converter From Degree To Radian\", (): void => {\n  it(\"90 deg == π/2 rad\", () => {\n    const degree = 90;\n    const radian = new Degree(degree).toRadian();\n\n    expect(Number(radian.toFixed(13))).toBe(1.5707963267949);\n  });\n\n  it(\"45 deg == π/4\", () => {\n    const degree = 45;\n    const radian = new Degree(degree).toRadian();\n\n    expect(Number(radian.toFixed(13))).toBe(0.7853981633974);\n  });\n\n  it(\"180 deg == π\", () => {\n    const degree = 180;\n    const radian = new Degree(degree).toRadian();\n\n    const result = Number(radian.toFixed(13));\n    const actualResult = Number(Math.PI.toFixed(13));\n\n    expect(result).toBe(actualResult);\n  });\n\n  it(\"270 deg == 3π/2\", () => {\n    const degree = 270;\n    const radian = new Degree(degree).toRadian();\n\n    const result = Number(radian.toFixed(13));\n    const actualResult = Number(((3 * Math.PI) / 2).toFixed(13));\n\n    expect(result).toBe(actualResult);\n  });\n\n  it(\"360 deg == 2π\", () => {\n    const degree = 360;\n    const radian = new Degree(degree).toRadian();\n\n    const result = Number(radian.toFixed(13));\n    const actualResult = Number((2 * Math.PI).toFixed(13));\n\n    expect(result).toBe(actualResult);\n  });\n});\n"]}