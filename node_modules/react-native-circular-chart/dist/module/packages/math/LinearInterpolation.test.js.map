{"version":3,"sources":["LinearInterpolation.test.js"],"names":["React","LinearInterpolation","describe","it","result","value","inputRange","outputRange","expectedResult","expect","toBe"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,mBAAT,QAAoC,uBAApC;AAEAC,QAAQ,CAAC,uBAAD,EAA0B,MAAY;AAC5CC,EAAAA,EAAE,CAAC,8EAAD,EAAiF,MAAM;AACvF,UAAMC,MAAM,GAAGH,mBAAmB,CAAC;AACjCI,MAAAA,KAAK,EAAE,EAD0B;AAEjCC,MAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,GAAJ,CAFqB;AAGjCC,MAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,GAAJ;AAHoB,KAAD,CAAlC;AAKA,UAAMC,cAAc,GAAG,EAAvB;AAEAC,IAAAA,MAAM,CAACL,MAAD,CAAN,CAAeM,IAAf,CAAoBF,cAApB;AACD,GATC,CAAF;AAWAL,EAAAA,EAAE,CAAC,4EAAD,EAA+E,MAAM;AACrF,UAAMC,MAAM,GAAGH,mBAAmB,CAAC;AACjCI,MAAAA,KAAK,EAAE,CAD0B;AAEjCC,MAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,GAAJ,CAFqB;AAGjCC,MAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,GAAJ;AAHoB,KAAD,CAAlC;AAKA,UAAMC,cAAc,GAAG,CAAvB;AAEAC,IAAAA,MAAM,CAACL,MAAD,CAAN,CAAeM,IAAf,CAAoBF,cAApB;AACD,GATC,CAAF;AAWAL,EAAAA,EAAE,CAAC,gFAAD,EAAmF,MAAM;AACzF,UAAMC,MAAM,GAAGH,mBAAmB,CAAC;AACjCI,MAAAA,KAAK,EAAE,GAD0B;AAEjCC,MAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,GAAJ,CAFqB;AAGjCC,MAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,GAAJ;AAHoB,KAAD,CAAlC;AAKA,UAAMC,cAAc,GAAG,GAAvB;AAEAC,IAAAA,MAAM,CAACL,MAAD,CAAN,CAAeM,IAAf,CAAoBF,cAApB;AACD,GATC,CAAF;AAWAL,EAAAA,EAAE,CAAC,8EAAD,EAAiF,MAAM;AACvF,UAAMC,MAAM,GAAGH,mBAAmB,CAAC;AACjCI,MAAAA,KAAK,EAAE,GAD0B;AAEjCC,MAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,GAAJ,CAFqB;AAGjCC,MAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,EAAJ;AAHoB,KAAD,CAAlC;AAKA,UAAMC,cAAc,GAAG,EAAvB;AAEAC,IAAAA,MAAM,CAACL,MAAD,CAAN,CAAeM,IAAf,CAAoBF,cAApB;AACD,GATC,CAAF;AAWAL,EAAAA,EAAE,CAAC,4EAAD,EAA+E,MAAM;AACrF,UAAMC,MAAM,GAAGH,mBAAmB,CAAC;AACjCI,MAAAA,KAAK,EAAE,EAD0B;AAEjCC,MAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,GAAJ,CAFqB;AAGjCC,MAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,EAAJ;AAHoB,KAAD,CAAlC;AAKA,UAAMC,cAAc,GAAG,CAAvB;AAEAC,IAAAA,MAAM,CAACL,MAAD,CAAN,CAAeM,IAAf,CAAoBF,cAApB;AACD,GATC,CAAF;AAUD,CAvDO,CAAR","sourcesContent":["import React from \"react\";\nimport { LinearInterpolation } from \"./LinearInterpolation\";\n\ndescribe(\"LinearInterpolation: \", (): void => {\n  it(\"should equal 50, when value: 50, inputRange: [0, 100], outputRange: [0, 100]\", () => {\n    const result = LinearInterpolation({\n      value: 50,\n      inputRange: [0, 100],\n      outputRange: [0, 100],\n    });\n    const expectedResult = 50;\n\n    expect(result).toBe(expectedResult);\n  });\n\n  it(\"should equal 0, when value: 0, inputRange: [0, 100], outputRange: [0, 100]\", () => {\n    const result = LinearInterpolation({\n      value: 0,\n      inputRange: [0, 100],\n      outputRange: [0, 100],\n    });\n    const expectedResult = 0;\n\n    expect(result).toBe(expectedResult);\n  });\n\n  it(\"should equal 100, when value: 100, inputRange: [0, 100], outputRange: [0, 100]\", () => {\n    const result = LinearInterpolation({\n      value: 100,\n      inputRange: [0, 100],\n      outputRange: [0, 100],\n    });\n    const expectedResult = 100;\n\n    expect(result).toBe(expectedResult);\n  });\n\n  it(\"should equal 10, when value: 100, inputRange: [0, 100], outputRange: [0, 10]\", () => {\n    const result = LinearInterpolation({\n      value: 100,\n      inputRange: [0, 100],\n      outputRange: [0, 10],\n    });\n    const expectedResult = 10;\n\n    expect(result).toBe(expectedResult);\n  });\n\n  it(\"should equal 9, when value: 90, inputRange: [0, 100], outputRange: [0, 10]\", () => {\n    const result = LinearInterpolation({\n      value: 90,\n      inputRange: [0, 100],\n      outputRange: [0, 10],\n    });\n    const expectedResult = 9;\n\n    expect(result).toBe(expectedResult);\n  });\n});\n"]}