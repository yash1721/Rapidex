{"version":3,"sources":["index.tsx"],"names":["AnimatedPath","Animated","createAnimatedComponent","Path","DonutChart","data","containerWidth","containerHeight","radius","startAngle","endAngle","strokeWidth","type","animationType","labelWrapperStyle","labelValueStyle","labelTitleStyle","containerStyle","donutItemListeners","viewBox","ViewBox","width","height","squareInCircle","Square","diameter","animateOpacity","Value","current","animateContainerOpacity","animatedStrokeWidths","map","pathRefs","animatedPaths","displayValue","setDisplayValue","rotationPaths","setRotationPath","defaultInterpolateConfig","inputRange","outputRange","sumOfDonutItemValue","d","value","reduce","total","prev","donutItemValueToPercentage","rotationRange","forEach","_","idx","fromValues","slice","toValues","push","from","to","setValue","slideAnimation","fadeAnimation","animations","i","ani","timing","toValue","duration","easing","Easing","bezier","useNativeDriver","parallel","start","element","addListener","animatedValue","startValue","removeAllListeners","angle","arcParams","coordX","getCenterCoord","x","coordY","y","drawPath","Arc","getDrawPath","setNativeProps","onUpdateDisplayValue","index","onPressIn","onPressOut","_getContainerStyle","styles","defaultContainer","_getLabelValueStyle","color","defaultLabelValue","_getLabelTitleStyle","defaultLabelTitle","_getLabelWrapperStyle","defaultLabelWrapper","getCorner","opacity","el","name","StyleSheet","create","display","justifyContent","alignItems","position","fontSize","fontWeight"],"mappings":";;;;;;;AAAA;;AACA;;AAWA;;AACA;;AACA;;AACA;;AACA;;;;;;AA2BA,MAAMA,YAAY,GAAGC,sBAASC,uBAAT,CAAiCC,oBAAjC,CAArB;;AAEO,MAAMC,UAAU,GAAG,QAeP;AAAA,MAfQ;AACzBC,IAAAA,IADyB;AAEzBC,IAAAA,cAFyB;AAGzBC,IAAAA,eAHyB;AAIzBC,IAAAA,MAJyB;AAKzBC,IAAAA,UAAU,GAAG,CAAC,GALW;AAMzBC,IAAAA,QAAQ,GAAGD,UAAU,GAAG,CAAC,CANA;AAOzBE,IAAAA,WAAW,GAAG,EAPW;AAQzBC,IAAAA,IAAI,GAAG,OARkB;AASzBC,IAAAA,aAAa,GAAG,OATS;AAWzBC,IAAAA,iBAXyB;AAYzBC,IAAAA,eAZyB;AAazBC,IAAAA,eAbyB;AAczBC,IAAAA;AAdyB,GAeR;AACjB,MAAIC,kBAAuB,GAAG,EAA9B;AACA,QAAMC,OAAO,GAAG,IAAIC,YAAJ,CAAY;AAC1BC,IAAAA,KAAK,EAAEf,cADmB;AAE1BgB,IAAAA,MAAM,EAAEf;AAFkB,GAAZ,CAAhB;AAIA,QAAMgB,cAAc,GAAG,IAAIC,aAAJ,CAAW;AAAEC,IAAAA,QAAQ,EAAEjB,MAAM,GAAG;AAArB,GAAX,CAAvB;AAEA,QAAMkB,cAAc,GAAG,mBAAO,IAAIzB,sBAAS0B,KAAb,CAAmB,CAAnB,CAAP,EAA8BC,OAArD;AACA,QAAMC,uBAAuB,GAAG,mBAAO,IAAI5B,sBAAS0B,KAAb,CAAmB,CAAnB,CAAP,EAA8BC,OAA9D;AACA,QAAME,oBAAoB,GAAG,mBAC3BzB,IAAI,CAAC0B,GAAL,CAAS,MAAM,IAAI9B,sBAAS0B,KAAb,CAAmBhB,WAAnB,CAAf,CAD2B,EAE3BiB,OAFF;AAGA,QAAMI,QAAQ,GAAG,mBAA8B,EAA9B,CAAjB;AACA,QAAMC,aAAa,GAAG,mBAA8B,EAA9B,EAAkCL,OAAxD;AAEA,QAAM,CAACM,YAAD,EAAeC,eAAf,IAAkC,qBAAoB9B,IAAI,CAAC,CAAD,CAAxB,CAAxC,CAhBiB,CAkBjB;AACA;;AACA,QAAM,CAAC+B,aAAD,EAAgBC,eAAhB,IAAmC,qBAEvC,EAFuC,CAAzC;;AAIA,QAAMC,wBAAwB,GAAG,OAG3B;AAAEC,IAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,GAAJ,CAAd;AAAwBC,IAAAA,WAAW,EAAE,CAAC/B,UAAD,EAAaC,QAAb;AAArC,GAH2B,CAAjC;;AAKA,QAAM+B,mBAAmB,GAAG,oBAC1B,MACEpC,IAAI,CACD0B,GADH,CACQW,CAAD,IAAOA,CAAC,CAACC,KADhB,EAEGC,MAFH,CAEU,CAACC,KAAD,EAAgBC,IAAhB,KAAiCD,KAAK,GAAGC,IAFnD,CAFwB,EAK1B,CAACzC,IAAD,CAL0B,CAA5B;AAQA,QAAM0C,0BAA0B,GAAG,oBACjC,MAAM1C,IAAI,CAAC0B,GAAL,CAAUW,CAAD,IAAQA,CAAC,CAACC,KAAF,GAAUF,mBAAX,GAAkC,GAAlD,CAD2B,EAEjC,CAACA,mBAAD,EAAsBpC,IAAtB,CAFiC,CAAnC;AAKA,sBAAQ,MAAM;AACZ,UAAM2C,aAAkD,GAAG,EAA3D;AAEA3C,IAAAA,IAAI,CAAC4C,OAAL,CAAa,CAACC,CAAD,EAAIC,GAAJ,KAAY;AACvB,YAAMC,UAAU,GAAG,gBAAIL,0BAA0B,CAACM,KAA3B,CAAiC,CAAjC,EAAoCF,GAApC,CAAJ,CAAnB;AACA,YAAMG,QAAQ,GAAG,gBAAIP,0BAA0B,CAACM,KAA3B,CAAiC,CAAjC,EAAoCF,GAAG,GAAG,CAA1C,CAAJ,CAAjB;AAEAlB,MAAAA,aAAa,CAACsB,IAAd,CACE,IAAItD,sBAAS0B,KAAb,CACE,+BAAoB;AAClBgB,QAAAA,KAAK,EAAES,UADW;AAElB,WAAGd,wBAAwB;AAFT,OAApB,CADF,CADF;AASAU,MAAAA,aAAa,CAACG,GAAD,CAAb,GAAqB;AACnBK,QAAAA,IAAI,EAAE,+BAAoB;AACxBb,UAAAA,KAAK,EAAES,UADiB;AAExB,aAAGd,wBAAwB;AAFH,SAApB,CADa;AAKnBmB,QAAAA,EAAE,EAAE,+BAAoB;AACtBd,UAAAA,KAAK,EAAEW,QADe;AAEtB,aAAGhB,wBAAwB;AAFL,SAApB;AALe,OAArB;AAUD,KAvBD;AAyBAD,IAAAA,eAAe,CAACW,aAAD,CAAf;AACD,GA7BD,EA6BG,CAAC3C,IAAD,CA7BH;AA+BA,wBAAU,MAAM;AACd,YAAQQ,aAAR;AACE,WAAK,OAAL;AACEgB,QAAAA,uBAAuB,CAAC6B,QAAxB,CAAiC,CAAjC;AACAC,QAAAA,cAAc;AACd;;AAEF;AACEC,QAAAA,aAAa;AACb;AARJ;AAUD,GAXD,EAWG,EAXH;;AAaA,QAAMD,cAAc,GAAG,MAAM;AAC3B,UAAME,UAAyC,GAAGxD,IAAI,CAAC0B,GAAL,CAAS,CAACmB,CAAD,EAAIY,CAAJ,KAAU;AACnE,YAAMC,GAAG,GAAG9D,sBAAS+D,MAAT,CAAgB/B,aAAa,CAAC6B,CAAD,CAA7B,EAAkC;AAC5CG,QAAAA,OAAO,EAAE7B,aAAa,CAAC0B,CAAD,CAAb,CAAiBL,EADkB;AAE5CS,QAAAA,QAAQ,EAAE,IAFkC;AAG5CC,QAAAA,MAAM,EAAEC,oBAAOC,MAAP,CAAc,KAAd,EAAqB,IAArB,EAA2B,KAA3B,EAAkC,CAAlC,CAHoC;AAI5CC,QAAAA,eAAe,EAAE;AAJ2B,OAAlC,CAAZ;;AAOA,aAAOP,GAAP;AACD,KATiD,CAAlD;;AAUA9D,0BAASsE,QAAT,CAAkBV,UAAlB,EAA8BW,KAA9B;AACD,GAZD;;AAcA,QAAMZ,aAAa,GAAG,MAAM;AAC1B3D,0BAAS+D,MAAT,CAAgBnC,uBAAhB,EAAyC;AACvCoC,MAAAA,OAAO,EAAE,CAD8B;AAEvCC,MAAAA,QAAQ,EAAE,IAF6B;AAGvCC,MAAAA,MAAM,EAAEC,oBAAOC,MAAP,CAAc,KAAd,EAAqB,IAArB,EAA2B,KAA3B,EAAkC,CAAlC,CAH+B;AAIvCC,MAAAA,eAAe,EAAE;AAJsB,KAAzC,EAKGE,KALH;AAMD,GAPD;;AASA,wBAAU,MAAM;AACdnE,IAAAA,IAAI,CAAC4C,OAAL,CAAa,CAACC,CAAD,EAAIY,CAAJ,KAAU;AACrB,YAAMW,OAAO,GAAGzC,QAAQ,CAACJ,OAAT,CAAiBkC,CAAjB,CAAhB;AACA5C,MAAAA,kBAAkB,CAAC4C,CAAD,CAAlB,GAAwBY,WAAW,CAAC;AAClCD,QAAAA,OADkC;AAElCE,QAAAA,aAAa,EAAE1C,aAAa,CAAC6B,CAAD,CAFM;AAGlCc,QAAAA,UAAU,EAAExC,aAAa,CAAC0B,CAAD,CAAb,CAAiBN;AAHK,OAAD,CAAnC;AAKD,KAPD;AAQD,GATD,EASG,EATH;AAWA,wBAAU,MAAM;AACd,WAAO,MAAM;AACX,UAAI3C,aAAa,KAAK,OAAtB,EAA+B;AAC7BR,QAAAA,IAAI,CAAC4C,OAAL,CAAa,CAACC,CAAD,EAAIY,CAAJ,KAAU;AACrB,cACE5C,kBAAkB,SAAlB,IAAAA,kBAAkB,WAAlB,IAAAA,kBAAkB,CAAG4C,CAAH,CAAlB,IACA5C,kBADA,aACAA,kBADA,eACAA,kBAAkB,CAAG4C,CAAH,CAAlB,CAAwBe,kBAF1B,EAGE;AAAA;;AACA3D,YAAAA,kBAAkB,SAAlB,IAAAA,kBAAkB,WAAlB,+DAAAA,kBAAkB,CAAG4C,CAAH,CAAlB,EAAwBe,kBAAxB;AACD;AACF,SAPD;AAQD;AACF,KAXD;AAYD,GAbD,EAaG,EAbH;;AAeA,QAAMH,WAAW,GAAG,SAQd;AAAA,QARe;AACnBD,MAAAA,OADmB;AAEnBE,MAAAA,aAFmB;AAGnBC,MAAAA;AAHmB,KAQf;AACJD,IAAAA,aAAa,CAACD,WAAd,CAA2BI,KAAD,IAAW;AACnC,YAAMC,SAAoB,GAAG;AAC3BC,QAAAA,MAAM,EAAE7D,OAAO,CAAC8D,cAAR,GAAyBC,CADN;AAE3BC,QAAAA,MAAM,EAAEhE,OAAO,CAAC8D,cAAR,GAAyBG,CAFN;AAG3B5E,QAAAA,MAAM,EAAEA,MAHmB;AAI3BC,QAAAA,UAAU,EAAEmE,UAJe;AAK3BlE,QAAAA,QAAQ,EAAEoE,KAAK,CAACnC;AALW,OAA7B;AAOA,YAAM0C,QAAQ,GAAG,IAAIC,QAAJ,CAAQP,SAAR,EAAmBQ,WAAnB,EAAjB;;AAEA,UAAId,OAAJ,EAAa;AACXA,QAAAA,OAAO,CAACe,cAAR,CAAuB;AAAE9C,UAAAA,CAAC,EAAE2C;AAAL,SAAvB;AACD;AACF,KAbD;AAcD,GAvBD;;AAyBA,wBAAU,MAAM;AACd3D,IAAAA,cAAc,CAACgC,QAAf,CAAwB,CAAxB;;AACAzD,0BAAS+D,MAAT,CAAgBtC,cAAhB,EAAgC;AAC9BuC,MAAAA,OAAO,EAAE,CADqB;AAE9BC,MAAAA,QAAQ,EAAE,GAFoB;AAG9BC,MAAAA,MAAM,EAAEC,oBAAOC,MAAP,CAAc,KAAd,EAAqB,IAArB,EAA2B,KAA3B,EAAkC,CAAlC,CAHsB;AAI9BC,MAAAA,eAAe,EAAE;AAJa,KAAhC,EAKGE,KALH;AAMD,GARD,EAQG,EARH;;AAUA,QAAMiB,oBAAoB,GAAG,CAAC9C,KAAD,EAAmB+C,KAAnB,KAAqC;AAChEvD,IAAAA,eAAe,CAACQ,KAAD,CAAf;AACAjB,IAAAA,cAAc,CAACgC,QAAf,CAAwB,CAAxB;;AAEAzD,0BAASsE,QAAT,CAAkB,CAChBtE,sBAAS+D,MAAT,CAAgBtC,cAAhB,EAAgC;AAC9BuC,MAAAA,OAAO,EAAE,CADqB;AAE9BC,MAAAA,QAAQ,EAAE,GAFoB;AAG9BI,MAAAA,eAAe,EAAE;AAHa,KAAhC,CADgB,CAAlB,EAMGE,KANH;AAOD,GAXD;;AAaA,QAAMmB,SAAS,GAAG,CAAChD,KAAD,EAAmB+C,KAAnB,KAAqC;AACrDzF,0BAAS+D,MAAT,CAAgBlC,oBAAoB,CAAC4D,KAAD,CAApC,EAA6C;AAC3CzB,MAAAA,OAAO,EAAEtD,WAAW,GAAG,CADoB;AAE3CuD,MAAAA,QAAQ,EAAE,GAFiC;AAG3CI,MAAAA,eAAe,EAAE,IAH0B;AAI3CH,MAAAA,MAAM,EAAEC,oBAAOC,MAAP,CAAc,KAAd,EAAqB,IAArB,EAA2B,KAA3B,EAAkC,CAAlC;AAJmC,KAA7C,EAKGG,KALH;AAMD,GAPD;;AASA,QAAMoB,UAAU,GAAIF,KAAD,IAAmB;AACpCzF,0BAAS+D,MAAT,CAAgBlC,oBAAoB,CAAC4D,KAAD,CAApC,EAA6C;AAC3CzB,MAAAA,OAAO,EAAEtD,WADkC;AAE3CuD,MAAAA,QAAQ,EAAE,GAFiC;AAG3CI,MAAAA,eAAe,EAAE,IAH0B;AAI3CH,MAAAA,MAAM,EAAEC,oBAAOC,MAAP,CAAc,KAAd,EAAqB,IAArB,EAA2B,KAA3B,EAAkC,CAAlC;AAJmC,KAA7C,EAKGG,KALH;AAMD,GAPD;;AASA,QAAMqB,kBAAkB,GAAG,MAA4B,CACrDC,MAAM,CAACC,gBAD8C,EAErD9E,cAFqD,EAGrD;AAAEI,IAAAA,KAAK,EAAEf,cAAT;AAAyBgB,IAAAA,MAAM,EAAEf;AAAjC,GAHqD,CAAvD;;AAMA,QAAMyF,mBAAmB,GAAIC,KAAD,IAAyC,CACnEH,MAAM,CAACI,iBAD4D,EAEnE;AAAED,IAAAA;AAAF,GAFmE,EAGnElF,eAHmE,CAArE;;AAMA,QAAMoF,mBAAmB,GAAIF,KAAD,IAAyC,CACnEH,MAAM,CAACM,iBAD4D,EAEnE;AAAEH,IAAAA;AAAF,GAFmE,EAGnEjF,eAHmE,CAArE;;AAMA,QAAMqF,qBAAqB,GAAG,MAAuC,CACnEP,MAAM,CAACQ,mBAD4D,EAEnE;AACEjF,IAAAA,KAAK,EAAEE,cAAc,CAACgF,SAAf,KAA6B5F,WADtC;AAEEW,IAAAA,MAAM,EAAEC,cAAc,CAACgF,SAAf,KAA6B5F,WAFvC;AAGE6F,IAAAA,OAAO,EAAE9E;AAHX,GAFmE,EAOnEZ,iBAPmE,CAArE;;AAUA,sBACE,6BAAC,eAAD,qBACE,6BAAC,iBAAD;AAAM,IAAA,KAAK,EAAE+E,kBAAkB;AAA/B,kBACE,6BAAC,mBAAD;AAAK,IAAA,KAAK,EAAE1E,OAAO,CAACE,KAApB;AAA2B,IAAA,MAAM,EAAEF,OAAO,CAACG;AAA3C,KACGc,aAAa,CAACL,GAAd,CAAkB,CAACW,CAAD,EAAIoB,CAAJ,KAAU;AAC3B,UAAMiB,SAAoB,GAAG;AAC3BC,MAAAA,MAAM,EAAE7D,OAAO,CAAC8D,cAAR,GAAyBC,CADN;AAE3BC,MAAAA,MAAM,EAAEhE,OAAO,CAAC8D,cAAR,GAAyBG,CAFN;AAG3B5E,MAAAA,MAAM,EAAEA,MAHmB;AAI3BC,MAAAA,UAAU,EAAEiC,CAAC,CAACc,IAJa;AAK3B9C,MAAAA,QAAQ,EAAEgC,CAAC,CAACe;AALe,KAA7B;AAOA,UAAM4B,QAAQ,GAAG,IAAIC,QAAJ,CAAQP,SAAR,EAAmBQ,WAAnB,EAAjB;AAEA,wBACE,6BAAC,YAAD;AACE,MAAA,GAAG,EAAG,QAAOzB,CAAE,EADjB;AAEE,MAAA,GAAG,EAAG2C,EAAD,IAAczE,QAAQ,CAACJ,OAAT,CAAiBkC,CAAjB,IAAsB2C,EAF3C;AAGE,MAAA,OAAO,EAAE,MAAMhB,oBAAoB,CAACpF,IAAI,CAACyD,CAAD,CAAL,EAAUA,CAAV,CAHrC;AAIE,MAAA,SAAS,EAAE,MAAM6B,SAAS,CAACtF,IAAI,CAACyD,CAAD,CAAL,EAAUA,CAAV,CAJ5B;AAKE,MAAA,UAAU,EAAE,MAAM8B,UAAU,CAAC9B,CAAD,CAL9B;AAME,MAAA,aAAa,EAAElD,IANjB;AAOE,MAAA,CAAC,EAAEyE,QAPL;AAQE,MAAA,OAAO,EAAExD,uBARX;AASE,MAAA,IAAI,EAAC,MATP;AAUE,MAAA,MAAM,EAAExB,IAAI,CAACyD,CAAD,CAAJ,CAAQmC,KAVlB;AAWE,MAAA,WAAW,EAAEnE,oBAAoB,CAACgC,CAAD;AAXnC,MADF;AAeD,GAzBA,CADH,CADF,eA6BE,6BAAC,qBAAD,CAAU,IAAV;AAAe,IAAA,KAAK,EAAEuC,qBAAqB;AAA3C,kBACE,6BAAC,iBAAD;AAAM,IAAA,KAAK,EAAEL,mBAAmB,CAAC9D,YAAD,aAACA,YAAD,uBAACA,YAAY,CAAE+D,KAAf;AAAhC,KACG/D,YADH,aACGA,YADH,uBACGA,YAAY,CAAES,KADjB,CADF,eAIE,6BAAC,iBAAD;AAAM,IAAA,KAAK,EAAEwD,mBAAmB,CAACjE,YAAD,aAACA,YAAD,uBAACA,YAAY,CAAE+D,KAAf;AAAhC,KACG/D,YADH,aACGA,YADH,uBACGA,YAAY,CAAEwE,IADjB,CAJF,CA7BF,CADF,CADF;AA0CD,CA9RM;;;;AA+RP,MAAMZ,MAAM,GAAGa,wBAAWC,MAAX,CAAkB;AAC/Bb,EAAAA,gBAAgB,EAAE;AAChBc,IAAAA,OAAO,EAAE,MADO;AAEhBC,IAAAA,cAAc,EAAE,QAFA;AAGhBC,IAAAA,UAAU,EAAE;AAHI,GADa;AAO/BT,EAAAA,mBAAmB,EAAE;AACnBU,IAAAA,QAAQ,EAAE,UADS;AAEnBF,IAAAA,cAAc,EAAE,QAFG;AAGnBC,IAAAA,UAAU,EAAE;AAHO,GAPU;AAa/Bb,EAAAA,iBAAiB,EAAE;AACjBe,IAAAA,QAAQ,EAAE,EADO;AAEjBC,IAAAA,UAAU,EAAE;AAFK,GAbY;AAkB/Bd,EAAAA,iBAAiB,EAAE;AACjBa,IAAAA,QAAQ,EAAE;AADO;AAlBY,CAAlB,CAAf","sourcesContent":["import React, { useEffect, useRef, useMemo, useState, Fragment } from \"react\";\nimport {\n  StyleProp,\n  Text,\n  View,\n  ViewStyle,\n  Animated,\n  StyleSheet,\n  TextStyle,\n  Easing,\n} from \"react-native\";\n\nimport { Svg, Path } from \"react-native-svg\";\nimport { Square } from \"./packages/shape\";\nimport { Arc, ArcParams, ViewBox } from \"./packages/svg\";\nimport { sum } from \"./packages/array\";\nimport { LinearInterpolation } from \"./packages/math\";\n\nexport type DonutItem = {\n  name: string;\n  value: number;\n  color: string;\n};\n\nexport type DonutAnimationType = \"fade\" | \"slide\";\n\nexport type IDonutProps = {\n  data: DonutItem[];\n  containerWidth: number;\n  containerHeight: number;\n  radius: number;\n  startAngle?: number;\n  endAngle?: number;\n  strokeWidth?: number;\n  type?: \"butt\" | \"round\";\n  labelValueStyle?: StyleProp<TextStyle>;\n  labelTitleStyle?: StyleProp<TextStyle>;\n  labelWrapperStyle?: StyleProp<ViewStyle>;\n  containerStyle?: StyleProp<ViewStyle>;\n\n  animationType?: DonutAnimationType;\n};\n\nconst AnimatedPath = Animated.createAnimatedComponent(Path);\n\nexport const DonutChart = ({\n  data,\n  containerWidth,\n  containerHeight,\n  radius,\n  startAngle = -125,\n  endAngle = startAngle * -1,\n  strokeWidth = 10,\n  type = \"round\",\n  animationType = \"slide\",\n\n  labelWrapperStyle,\n  labelValueStyle,\n  labelTitleStyle,\n  containerStyle,\n}: IDonutProps) => {\n  let donutItemListeners: any = [];\n  const viewBox = new ViewBox({\n    width: containerWidth,\n    height: containerHeight,\n  });\n  const squareInCircle = new Square({ diameter: radius * 2 });\n\n  const animateOpacity = useRef(new Animated.Value(0)).current;\n  const animateContainerOpacity = useRef(new Animated.Value(0)).current;\n  const animatedStrokeWidths = useRef(\n    data.map(() => new Animated.Value(strokeWidth))\n  ).current;\n  const pathRefs = useRef<typeof AnimatedPath[]>([]);\n  const animatedPaths = useRef<Array<Animated.Value>>([]).current;\n\n  const [displayValue, setDisplayValue] = useState<DonutItem>(data[0]);\n\n  // TODO:\n  // remove WTF is this variable ?\n  const [rotationPaths, setRotationPath] = useState<\n    Array<{ from: number; to: number }>\n  >([]);\n\n  const defaultInterpolateConfig = (): {\n    inputRange: [number, number];\n    outputRange: [number, number];\n  } => ({ inputRange: [0, 100], outputRange: [startAngle, endAngle] });\n\n  const sumOfDonutItemValue = useMemo(\n    (): number =>\n      data\n        .map((d) => d.value)\n        .reduce((total: number, prev: number) => total + prev),\n    [data]\n  );\n\n  const donutItemValueToPercentage = useMemo(\n    () => data.map((d) => (d.value / sumOfDonutItemValue) * 100),\n    [sumOfDonutItemValue, data]\n  );\n\n  useMemo(() => {\n    const rotationRange: Array<{ from: number; to: number }> = [];\n\n    data.forEach((_, idx) => {\n      const fromValues = sum(donutItemValueToPercentage.slice(0, idx));\n      const toValues = sum(donutItemValueToPercentage.slice(0, idx + 1));\n\n      animatedPaths.push(\n        new Animated.Value(\n          LinearInterpolation({\n            value: fromValues,\n            ...defaultInterpolateConfig(),\n          })\n        )\n      );\n\n      rotationRange[idx] = {\n        from: LinearInterpolation({\n          value: fromValues,\n          ...defaultInterpolateConfig(),\n        }),\n        to: LinearInterpolation({\n          value: toValues,\n          ...defaultInterpolateConfig(),\n        }),\n      };\n    });\n\n    setRotationPath(rotationRange);\n  }, [data]);\n\n  useEffect(() => {\n    switch (animationType) {\n      case \"slide\":\n        animateContainerOpacity.setValue(1);\n        slideAnimation();\n        break;\n\n      default:\n        fadeAnimation();\n        break;\n    }\n  }, []);\n\n  const slideAnimation = () => {\n    const animations: Animated.CompositeAnimation[] = data.map((_, i) => {\n      const ani = Animated.timing(animatedPaths[i], {\n        toValue: rotationPaths[i].to,\n        duration: 3000,\n        easing: Easing.bezier(0.075, 0.82, 0.165, 1),\n        useNativeDriver: true,\n      });\n\n      return ani;\n    });\n    Animated.parallel(animations).start();\n  };\n\n  const fadeAnimation = () => {\n    Animated.timing(animateContainerOpacity, {\n      toValue: 1,\n      duration: 5000,\n      easing: Easing.bezier(0.075, 0.82, 0.165, 1),\n      useNativeDriver: true,\n    }).start();\n  };\n\n  useEffect(() => {\n    data.forEach((_, i) => {\n      const element = pathRefs.current[i];\n      donutItemListeners[i] = addListener({\n        element,\n        animatedValue: animatedPaths[i],\n        startValue: rotationPaths[i].from,\n      });\n    });\n  }, []);\n\n  useEffect(() => {\n    return () => {\n      if (animationType === \"slide\") {\n        data.forEach((_, i) => {\n          if (\n            donutItemListeners?.[i] &&\n            donutItemListeners?.[i].removeAllListeners\n          ) {\n            donutItemListeners?.[i].removeAllListeners?.();\n          }\n        });\n      }\n    };\n  }, []);\n\n  const addListener = ({\n    element,\n    animatedValue,\n    startValue,\n  }: {\n    element: any;\n    animatedValue: Animated.Value;\n    startValue: number;\n  }) => {\n    animatedValue.addListener((angle) => {\n      const arcParams: ArcParams = {\n        coordX: viewBox.getCenterCoord().x,\n        coordY: viewBox.getCenterCoord().y,\n        radius: radius,\n        startAngle: startValue,\n        endAngle: angle.value,\n      };\n      const drawPath = new Arc(arcParams).getDrawPath();\n\n      if (element) {\n        element.setNativeProps({ d: drawPath });\n      }\n    });\n  };\n\n  useEffect(() => {\n    animateOpacity.setValue(0);\n    Animated.timing(animateOpacity, {\n      toValue: 1,\n      duration: 500,\n      easing: Easing.bezier(0.075, 0.82, 0.165, 1),\n      useNativeDriver: true,\n    }).start();\n  }, []);\n\n  const onUpdateDisplayValue = (value: DonutItem, index: number) => {\n    setDisplayValue(value);\n    animateOpacity.setValue(0);\n\n    Animated.parallel([\n      Animated.timing(animateOpacity, {\n        toValue: 1,\n        duration: 500,\n        useNativeDriver: true,\n      }),\n    ]).start();\n  };\n\n  const onPressIn = (value: DonutItem, index: number) => {\n    Animated.timing(animatedStrokeWidths[index], {\n      toValue: strokeWidth + 2,\n      duration: 500,\n      useNativeDriver: true,\n      easing: Easing.bezier(0.075, 0.82, 0.165, 1),\n    }).start();\n  };\n\n  const onPressOut = (index: number) => {\n    Animated.timing(animatedStrokeWidths[index], {\n      toValue: strokeWidth,\n      duration: 500,\n      useNativeDriver: true,\n      easing: Easing.bezier(0.075, 0.82, 0.165, 1),\n    }).start();\n  };\n\n  const _getContainerStyle = (): StyleProp<ViewStyle> => [\n    styles.defaultContainer,\n    containerStyle,\n    { width: containerWidth, height: containerHeight },\n  ];\n\n  const _getLabelValueStyle = (color: string): StyleProp<TextStyle> => [\n    styles.defaultLabelValue,\n    { color },\n    labelValueStyle,\n  ];\n\n  const _getLabelTitleStyle = (color: string): StyleProp<TextStyle> => [\n    styles.defaultLabelTitle,\n    { color },\n    labelTitleStyle,\n  ];\n\n  const _getLabelWrapperStyle = (): Animated.WithAnimatedArray<any> => [\n    styles.defaultLabelWrapper,\n    {\n      width: squareInCircle.getCorner() - strokeWidth,\n      height: squareInCircle.getCorner() - strokeWidth,\n      opacity: animateOpacity,\n    },\n    labelWrapperStyle,\n  ];\n\n  return (\n    <Fragment>\n      <View style={_getContainerStyle()}>\n        <Svg width={viewBox.width} height={viewBox.height}>\n          {rotationPaths.map((d, i) => {\n            const arcParams: ArcParams = {\n              coordX: viewBox.getCenterCoord().x,\n              coordY: viewBox.getCenterCoord().y,\n              radius: radius,\n              startAngle: d.from,\n              endAngle: d.to,\n            };\n            const drawPath = new Arc(arcParams).getDrawPath();\n\n            return (\n              <AnimatedPath\n                key={`item-${i}`}\n                ref={(el: any) => (pathRefs.current[i] = el)}\n                onPress={() => onUpdateDisplayValue(data[i], i)}\n                onPressIn={() => onPressIn(data[i], i)}\n                onPressOut={() => onPressOut(i)}\n                strokeLinecap={type}\n                d={drawPath}\n                opacity={animateContainerOpacity}\n                fill=\"none\"\n                stroke={data[i].color}\n                strokeWidth={animatedStrokeWidths[i]}\n              />\n            );\n          })}\n        </Svg>\n        <Animated.View style={_getLabelWrapperStyle()}>\n          <Text style={_getLabelValueStyle(displayValue?.color)}>\n            {displayValue?.value}\n          </Text>\n          <Text style={_getLabelTitleStyle(displayValue?.color)}>\n            {displayValue?.name}\n          </Text>\n        </Animated.View>\n      </View>\n    </Fragment>\n  );\n};\nconst styles = StyleSheet.create({\n  defaultContainer: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n\n  defaultLabelWrapper: {\n    position: \"absolute\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n\n  defaultLabelValue: {\n    fontSize: 32,\n    fontWeight: \"bold\",\n  },\n\n  defaultLabelTitle: {\n    fontSize: 16,\n  },\n});\n"]}