{"version":3,"sources":["Radian.test.js"],"names":["describe","it","radian","Math","PI","degree","Radian","toDegree","result","Number","toFixed","actualResult","expect","toBe"],"mappings":";;AAAA;;AAEA;;;;AADA;AAGAA,QAAQ,CAAC,iCAAD,EAAoC,MAAY;AACtDC,EAAAA,EAAE,CAAC,eAAD,EAAkB,MAAM;AACxB,UAAMC,MAAM,GAAGC,IAAI,CAACC,EAAL,GAAU,CAAzB;AACA,UAAMC,MAAM,GAAG,IAAIC,cAAJ,CAAWJ,MAAX,EAAmBK,QAAnB,EAAf;AAEA,UAAMC,MAAM,GAAGC,MAAM,CAACJ,MAAM,CAACK,OAAP,CAAe,EAAf,CAAD,CAArB;AACA,UAAMC,YAAY,GAAG,EAArB;AAEAC,IAAAA,MAAM,CAACJ,MAAD,CAAN,CAAeK,IAAf,CAAoBF,YAApB;AACD,GARC,CAAF;AAUAV,EAAAA,EAAE,CAAC,eAAD,EAAkB,MAAM;AACxB,UAAMC,MAAM,GAAGC,IAAI,CAACC,EAAL,GAAU,CAAzB;AACA,UAAMC,MAAM,GAAG,IAAIC,cAAJ,CAAWJ,MAAX,EAAmBK,QAAnB,EAAf;AAEA,UAAMC,MAAM,GAAGC,MAAM,CAACJ,MAAM,CAACK,OAAP,CAAe,EAAf,CAAD,CAArB;AACA,UAAMC,YAAY,GAAG,EAArB;AAEAC,IAAAA,MAAM,CAACJ,MAAD,CAAN,CAAeK,IAAf,CAAoBF,YAApB;AACD,GARC,CAAF;AAUAV,EAAAA,EAAE,CAAC,aAAD,EAAgB,MAAM;AACtB,UAAMC,MAAM,GAAGC,IAAI,CAACC,EAApB;AACA,UAAMC,MAAM,GAAG,IAAIC,cAAJ,CAAWJ,MAAX,EAAmBK,QAAnB,EAAf;AAEA,UAAMC,MAAM,GAAGC,MAAM,CAACJ,MAAM,CAACK,OAAP,CAAe,EAAf,CAAD,CAArB;AACA,UAAMC,YAAY,GAAG,GAArB;AAEAC,IAAAA,MAAM,CAACJ,MAAD,CAAN,CAAeK,IAAf,CAAoBF,YAApB;AACD,GARC,CAAF;AAUAV,EAAAA,EAAE,CAAC,iBAAD,EAAoB,MAAM;AAC1B,UAAMC,MAAM,GAAI,IAAIC,IAAI,CAACC,EAAV,GAAgB,CAA/B;AACA,UAAMC,MAAM,GAAG,IAAIC,cAAJ,CAAWJ,MAAX,EAAmBK,QAAnB,EAAf;AAEA,UAAMC,MAAM,GAAGC,MAAM,CAACJ,MAAM,CAACK,OAAP,CAAe,EAAf,CAAD,CAArB;AACA,UAAMC,YAAY,GAAG,GAArB;AAEAC,IAAAA,MAAM,CAACJ,MAAD,CAAN,CAAeK,IAAf,CAAoBF,YAApB;AACD,GARC,CAAF;AAUAV,EAAAA,EAAE,CAAC,eAAD,EAAkB,MAAM;AACxB,UAAMC,MAAM,GAAG,IAAIC,IAAI,CAACC,EAAxB;AACA,UAAMC,MAAM,GAAG,IAAIC,cAAJ,CAAWJ,MAAX,EAAmBK,QAAnB,EAAf;AAEA,UAAMC,MAAM,GAAGC,MAAM,CAACJ,MAAM,CAACK,OAAP,CAAe,EAAf,CAAD,CAArB;AACA,UAAMC,YAAY,GAAG,GAArB;AAEAC,IAAAA,MAAM,CAACJ,MAAD,CAAN,CAAeK,IAAf,CAAoBF,YAApB;AACD,GARC,CAAF;AASD,CAlDO,CAAR","sourcesContent":["import React from \"react\";\n// import { sum } from \"../../src/utils/Array\";\nimport { Radian } from \"./Radian\";\n\ndescribe(\"Converter From Radian To Radian\", (): void => {\n  it(\"π/2 == 90 deg\", () => {\n    const radian = Math.PI / 2;\n    const degree = new Radian(radian).toDegree();\n\n    const result = Number(degree.toFixed(13));\n    const actualResult = 90;\n\n    expect(result).toBe(actualResult);\n  });\n\n  it(\"π/4 == 45 deg\", () => {\n    const radian = Math.PI / 4;\n    const degree = new Radian(radian).toDegree();\n\n    const result = Number(degree.toFixed(13));\n    const actualResult = 45;\n\n    expect(result).toBe(actualResult);\n  });\n\n  it(\"π == 180deg\", () => {\n    const radian = Math.PI;\n    const degree = new Radian(radian).toDegree();\n\n    const result = Number(degree.toFixed(13));\n    const actualResult = 180;\n\n    expect(result).toBe(actualResult);\n  });\n\n  it(\"3π/2 == 270 deg\", () => {\n    const radian = (3 * Math.PI) / 2;\n    const degree = new Radian(radian).toDegree();\n\n    const result = Number(degree.toFixed(13));\n    const actualResult = 270;\n\n    expect(result).toBe(actualResult);\n  });\n\n  it(\"2π == 360 deg\", () => {\n    const radian = 2 * Math.PI;\n    const degree = new Radian(radian).toDegree();\n\n    const result = Number(degree.toFixed(13));\n    const actualResult = 360;\n\n    expect(result).toBe(actualResult);\n  });\n});\n"]}